{"ast":null,"code":"import RRule from '../rrule';\nimport { empty, repeat, pymod } from '../helpers';\nexport function rebuildMonth(year, month, yearlen, mrange, wdaymask, options) {\n  var result = {\n    lastyear: year,\n    lastmonth: month,\n    nwdaymask: []\n  };\n  var ranges = [];\n\n  if (options.freq === RRule.YEARLY) {\n    if (empty(options.bymonth)) {\n      ranges = [[0, yearlen]];\n    } else {\n      for (var j = 0; j < options.bymonth.length; j++) {\n        month = options.bymonth[j];\n        ranges.push(mrange.slice(month - 1, month + 1));\n      }\n    }\n  } else if (options.freq === RRule.MONTHLY) {\n    ranges = [mrange.slice(month - 1, month + 1)];\n  }\n\n  if (empty(ranges)) {\n    return result;\n  } // Weekly frequency won't get here, so we may not\n  // care about cross-year weekly periods.\n\n\n  result.nwdaymask = repeat(0, yearlen);\n\n  for (var j = 0; j < ranges.length; j++) {\n    var rang = ranges[j];\n    var first = rang[0];\n    var last = rang[1] - 1;\n\n    for (var k = 0; k < options.bynweekday.length; k++) {\n      var i = void 0;\n      var _a = options.bynweekday[k],\n          wday = _a[0],\n          n = _a[1];\n\n      if (n < 0) {\n        i = last + (n + 1) * 7;\n        i -= pymod(wdaymask[i] - wday, 7);\n      } else {\n        i = first + (n - 1) * 7;\n        i += pymod(7 - wdaymask[i] + wday, 7);\n      }\n\n      if (first <= i && i <= last) result.nwdaymask[i] = 1;\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../../src/iterinfo/monthinfo.ts"],"names":[],"mappings":"AACA,OAAO,KAAP,MAAkB,UAAlB;AACA,SAAS,KAAT,EAAgB,MAAhB,EAAwB,KAAxB,QAAqC,YAArC;AAQA,OAAM,SAAU,YAAV,CACJ,IADI,EAEJ,KAFI,EAGJ,OAHI,EAIJ,MAJI,EAKJ,QALI,EAMJ,OANI,EAMkB;AAEtB,MAAM,MAAM,GAAc;AACxB,IAAA,QAAQ,EAAE,IADc;AAExB,IAAA,SAAS,EAAE,KAFa;AAGxB,IAAA,SAAS,EAAE;AAHa,GAA1B;AAMA,MAAI,MAAM,GAAe,EAAzB;;AACA,MAAI,OAAO,CAAC,IAAR,KAAiB,KAAK,CAAC,MAA3B,EAAmC;AACjC,QAAI,KAAK,CAAC,OAAO,CAAC,OAAT,CAAT,EAA4B;AAC1B,MAAA,MAAM,GAAG,CAAC,CAAC,CAAD,EAAI,OAAJ,CAAD,CAAT;AACD,KAFD,MAEO;AACL,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,OAAR,CAAgB,MAApC,EAA4C,CAAC,EAA7C,EAAiD;AAC/C,QAAA,KAAK,GAAG,OAAO,CAAC,OAAR,CAAgB,CAAhB,CAAR;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,KAAP,CAAa,KAAK,GAAG,CAArB,EAAwB,KAAK,GAAG,CAAhC,CAAZ;AACD;AACF;AACF,GATD,MASO,IAAI,OAAO,CAAC,IAAR,KAAiB,KAAK,CAAC,OAA3B,EAAoC;AACzC,IAAA,MAAM,GAAG,CAAC,MAAM,CAAC,KAAP,CAAa,KAAK,GAAG,CAArB,EAAwB,KAAK,GAAG,CAAhC,CAAD,CAAT;AACD;;AAED,MAAI,KAAK,CAAC,MAAD,CAAT,EAAmB;AACjB,WAAO,MAAP;AACD,GAxBqB,CA0BtB;AACA;;;AACA,EAAA,MAAM,CAAC,SAAP,GAAmB,MAAM,CAAC,CAAD,EAAI,OAAJ,CAAzB;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,QAAM,IAAI,GAAG,MAAM,CAAC,CAAD,CAAnB;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,CAAD,CAAlB;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAvB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,UAAR,CAAoB,MAAxC,EAAgD,CAAC,EAAjD,EAAqD;AACnD,UAAI,CAAC,GAAA,KAAA,CAAL;AACM,UAAA,EAAA,GAAA,OAAA,CAAA,UAAA,CAAA,CAAA,CAAA;AAAA,UAAE,IAAA,GAAA,EAAA,CAAA,CAAA,CAAF;AAAA,UAAQ,CAAA,GAAA,EAAA,CAAA,CAAA,CAAR;;AACN,UAAI,CAAC,GAAG,CAAR,EAAW;AACT,QAAA,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,CAArB;AACA,QAAA,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAD,CAAR,GAAc,IAAf,EAAqB,CAArB,CAAV;AACD,OAHD,MAGO;AACL,QAAA,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,CAAtB;AACA,QAAA,CAAC,IAAI,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAD,CAAZ,GAAkB,IAAnB,EAAyB,CAAzB,CAAV;AACD;;AACD,UAAI,KAAK,IAAI,CAAT,IAAc,CAAC,IAAI,IAAvB,EAA6B,MAAM,CAAC,SAAP,CAAiB,CAAjB,IAAsB,CAAtB;AAC9B;AACF;;AAED,SAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["import RRule from '../rrule';\nimport { empty, repeat, pymod } from '../helpers';\nexport function rebuildMonth(year, month, yearlen, mrange, wdaymask, options) {\n    var result = {\n        lastyear: year,\n        lastmonth: month,\n        nwdaymask: []\n    };\n    var ranges = [];\n    if (options.freq === RRule.YEARLY) {\n        if (empty(options.bymonth)) {\n            ranges = [[0, yearlen]];\n        }\n        else {\n            for (var j = 0; j < options.bymonth.length; j++) {\n                month = options.bymonth[j];\n                ranges.push(mrange.slice(month - 1, month + 1));\n            }\n        }\n    }\n    else if (options.freq === RRule.MONTHLY) {\n        ranges = [mrange.slice(month - 1, month + 1)];\n    }\n    if (empty(ranges)) {\n        return result;\n    }\n    // Weekly frequency won't get here, so we may not\n    // care about cross-year weekly periods.\n    result.nwdaymask = repeat(0, yearlen);\n    for (var j = 0; j < ranges.length; j++) {\n        var rang = ranges[j];\n        var first = rang[0];\n        var last = rang[1] - 1;\n        for (var k = 0; k < options.bynweekday.length; k++) {\n            var i = void 0;\n            var _a = options.bynweekday[k], wday = _a[0], n = _a[1];\n            if (n < 0) {\n                i = last + (n + 1) * 7;\n                i -= pymod(wdaymask[i] - wday, 7);\n            }\n            else {\n                i = first + (n - 1) * 7;\n                i += pymod(7 - wdaymask[i] + wday, 7);\n            }\n            if (first <= i && i <= last)\n                result.nwdaymask[i] = 1;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=monthinfo.js.map"]},"metadata":{},"sourceType":"module"}