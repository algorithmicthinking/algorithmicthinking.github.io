{"ast":null,"code":"import ENGLISH from './i18n';\nimport RRule from '../index'; // =============================================================================\n// Parser\n// =============================================================================\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser(rules) {\n    this.done = true;\n    this.rules = rules;\n  }\n\n  Parser.prototype.start = function (text) {\n    this.text = text;\n    this.done = false;\n    return this.nextSymbol();\n  };\n\n  Parser.prototype.isDone = function () {\n    return this.done && this.symbol === null;\n  };\n\n  Parser.prototype.nextSymbol = function () {\n    var best;\n    var bestSymbol;\n    var p = this;\n    this.symbol = null;\n    this.value = null;\n\n    do {\n      if (this.done) return false;\n      var rule = void 0;\n      best = null;\n\n      for (var name_1 in this.rules) {\n        rule = this.rules[name_1];\n        var match = rule.exec(p.text);\n\n        if (match) {\n          if (best === null || match[0].length > best[0].length) {\n            best = match;\n            bestSymbol = name_1;\n          }\n        }\n      }\n\n      if (best != null) {\n        this.text = this.text.substr(best[0].length);\n        if (this.text === '') this.done = true;\n      }\n\n      if (best == null) {\n        this.done = true;\n        this.symbol = null;\n        this.value = null;\n        return;\n      } // @ts-ignore\n\n    } while (bestSymbol === 'SKIP'); // @ts-ignore\n\n\n    this.symbol = bestSymbol;\n    this.value = best;\n    return true;\n  };\n\n  Parser.prototype.accept = function (name) {\n    if (this.symbol === name) {\n      if (this.value) {\n        var v = this.value;\n        this.nextSymbol();\n        return v;\n      }\n\n      this.nextSymbol();\n      return true;\n    }\n\n    return false;\n  };\n\n  Parser.prototype.acceptNumber = function () {\n    return this.accept('number');\n  };\n\n  Parser.prototype.expect = function (name) {\n    if (this.accept(name)) return true;\n    throw new Error('expected ' + name + ' but found ' + this.symbol);\n  };\n\n  return Parser;\n}();\n\nexport default function parseText(text, language) {\n  if (language === void 0) {\n    language = ENGLISH;\n  }\n\n  var options = {};\n  var ttr = new Parser(language.tokens);\n  if (!ttr.start(text)) return null;\n  S();\n  return options;\n\n  function S() {\n    // every [n]\n    ttr.expect('every');\n    var n = ttr.acceptNumber();\n    if (n) options.interval = parseInt(n[0], 10);\n    if (ttr.isDone()) throw new Error('Unexpected end');\n\n    switch (ttr.symbol) {\n      case 'day(s)':\n        options.freq = RRule.DAILY;\n\n        if (ttr.nextSymbol()) {\n          AT();\n          F();\n        }\n\n        break;\n      // FIXME Note: every 2 weekdays != every two weeks on weekdays.\n      // DAILY on weekdays is not a valid rule\n\n      case 'weekday(s)':\n        options.freq = RRule.WEEKLY;\n        options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];\n        ttr.nextSymbol();\n        F();\n        break;\n\n      case 'week(s)':\n        options.freq = RRule.WEEKLY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'hour(s)':\n        options.freq = RRule.HOURLY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'minute(s)':\n        options.freq = RRule.MINUTELY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'month(s)':\n        options.freq = RRule.MONTHLY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'year(s)':\n        options.freq = RRule.YEARLY;\n\n        if (ttr.nextSymbol()) {\n          ON();\n          F();\n        }\n\n        break;\n\n      case 'monday':\n      case 'tuesday':\n      case 'wednesday':\n      case 'thursday':\n      case 'friday':\n      case 'saturday':\n      case 'sunday':\n        options.freq = RRule.WEEKLY;\n        var key = ttr.symbol.substr(0, 2).toUpperCase();\n        options.byweekday = [RRule[key]];\n        if (!ttr.nextSymbol()) return; // TODO check for duplicates\n\n        while (ttr.accept('comma')) {\n          if (ttr.isDone()) throw new Error('Unexpected end');\n          var wkd = decodeWKD();\n\n          if (!wkd) {\n            throw new Error('Unexpected symbol ' + ttr.symbol + ', expected weekday');\n          } // @ts-ignore\n\n\n          options.byweekday.push(RRule[wkd]);\n          ttr.nextSymbol();\n        }\n\n        MDAYs();\n        F();\n        break;\n\n      case 'january':\n      case 'february':\n      case 'march':\n      case 'april':\n      case 'may':\n      case 'june':\n      case 'july':\n      case 'august':\n      case 'september':\n      case 'october':\n      case 'november':\n      case 'december':\n        options.freq = RRule.YEARLY;\n        options.bymonth = [decodeM()];\n        if (!ttr.nextSymbol()) return; // TODO check for duplicates\n\n        while (ttr.accept('comma')) {\n          if (ttr.isDone()) throw new Error('Unexpected end');\n          var m = decodeM();\n\n          if (!m) {\n            throw new Error('Unexpected symbol ' + ttr.symbol + ', expected month');\n          }\n\n          options.bymonth.push(m);\n          ttr.nextSymbol();\n        }\n\n        ON();\n        F();\n        break;\n\n      default:\n        throw new Error('Unknown symbol');\n    }\n  }\n\n  function ON() {\n    var on = ttr.accept('on');\n    var the = ttr.accept('the');\n    if (!(on || the)) return;\n\n    do {\n      var nth = decodeNTH();\n      var wkd = decodeWKD();\n      var m = decodeM(); // nth <weekday> | <weekday>\n\n      if (nth) {\n        // ttr.nextSymbol()\n        if (wkd) {\n          ttr.nextSymbol();\n          if (!options.byweekday) options.byweekday = []; // @ts-ignore\n\n          options.byweekday.push(RRule[wkd].nth(nth));\n        } else {\n          if (!options.bymonthday) options.bymonthday = []; // @ts-ignore\n\n          options.bymonthday.push(nth);\n          ttr.accept('day(s)');\n        } // <weekday>\n\n      } else if (wkd) {\n        ttr.nextSymbol();\n        if (!options.byweekday) options.byweekday = []; // @ts-ignore\n\n        options.byweekday.push(RRule[wkd]);\n      } else if (ttr.symbol === 'weekday(s)') {\n        ttr.nextSymbol();\n\n        if (!options.byweekday) {\n          options.byweekday = [RRule.MO, RRule.TU, RRule.WE, RRule.TH, RRule.FR];\n        }\n      } else if (ttr.symbol === 'week(s)') {\n        ttr.nextSymbol();\n        var n = ttr.acceptNumber();\n\n        if (!n) {\n          throw new Error('Unexpected symbol ' + ttr.symbol + ', expected week number');\n        }\n\n        options.byweekno = [parseInt(n[0], 10)];\n\n        while (ttr.accept('comma')) {\n          n = ttr.acceptNumber();\n\n          if (!n) {\n            throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n          }\n\n          options.byweekno.push(parseInt(n[0], 10));\n        }\n      } else if (m) {\n        ttr.nextSymbol();\n        if (!options.bymonth) options.bymonth = []; // @ts-ignore\n\n        options.bymonth.push(m);\n      } else {\n        return;\n      }\n    } while (ttr.accept('comma') || ttr.accept('the') || ttr.accept('on'));\n  }\n\n  function AT() {\n    var at = ttr.accept('at');\n    if (!at) return;\n\n    do {\n      var n = ttr.acceptNumber();\n\n      if (!n) {\n        throw new Error('Unexpected symbol ' + ttr.symbol + ', expected hour');\n      }\n\n      options.byhour = [parseInt(n[0], 10)];\n\n      while (ttr.accept('comma')) {\n        n = ttr.acceptNumber();\n\n        if (!n) {\n          throw new Error('Unexpected symbol ' + ttr.symbol + '; expected hour');\n        }\n\n        options.byhour.push(parseInt(n[0], 10));\n      }\n    } while (ttr.accept('comma') || ttr.accept('at'));\n  }\n\n  function decodeM() {\n    switch (ttr.symbol) {\n      case 'january':\n        return 1;\n\n      case 'february':\n        return 2;\n\n      case 'march':\n        return 3;\n\n      case 'april':\n        return 4;\n\n      case 'may':\n        return 5;\n\n      case 'june':\n        return 6;\n\n      case 'july':\n        return 7;\n\n      case 'august':\n        return 8;\n\n      case 'september':\n        return 9;\n\n      case 'october':\n        return 10;\n\n      case 'november':\n        return 11;\n\n      case 'december':\n        return 12;\n\n      default:\n        return false;\n    }\n  }\n\n  function decodeWKD() {\n    switch (ttr.symbol) {\n      case 'monday':\n      case 'tuesday':\n      case 'wednesday':\n      case 'thursday':\n      case 'friday':\n      case 'saturday':\n      case 'sunday':\n        return ttr.symbol.substr(0, 2).toUpperCase();\n\n      default:\n        return false;\n    }\n  }\n\n  function decodeNTH() {\n    switch (ttr.symbol) {\n      case 'last':\n        ttr.nextSymbol();\n        return -1;\n\n      case 'first':\n        ttr.nextSymbol();\n        return 1;\n\n      case 'second':\n        ttr.nextSymbol();\n        return ttr.accept('last') ? -2 : 2;\n\n      case 'third':\n        ttr.nextSymbol();\n        return ttr.accept('last') ? -3 : 3;\n\n      case 'nth':\n        var v = parseInt(ttr.value[1], 10);\n        if (v < -366 || v > 366) throw new Error('Nth out of range: ' + v);\n        ttr.nextSymbol();\n        return ttr.accept('last') ? -v : v;\n\n      default:\n        return false;\n    }\n  }\n\n  function MDAYs() {\n    ttr.accept('on');\n    ttr.accept('the');\n    var nth = decodeNTH();\n    if (!nth) return;\n    options.bymonthday = [nth];\n    ttr.nextSymbol();\n\n    while (ttr.accept('comma')) {\n      nth = decodeNTH();\n\n      if (!nth) {\n        throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n      }\n\n      options.bymonthday.push(nth);\n      ttr.nextSymbol();\n    }\n  }\n\n  function F() {\n    if (ttr.symbol === 'until') {\n      var date = Date.parse(ttr.text);\n      if (!date) throw new Error('Cannot parse until date:' + ttr.text);\n      options.until = new Date(date);\n    } else if (ttr.accept('for')) {\n      options.count = parseInt(ttr.value[0], 10);\n      ttr.expect('number'); // ttr.expect('times')\n    }\n  }\n}","map":{"version":3,"sources":["../../../../src/nlp/parsetext.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import ENGLISH from './i18n';\nimport RRule from '../index';\n// =============================================================================\n// Parser\n// =============================================================================\nvar Parser = /** @class */ (function () {\n    function Parser(rules) {\n        this.done = true;\n        this.rules = rules;\n    }\n    Parser.prototype.start = function (text) {\n        this.text = text;\n        this.done = false;\n        return this.nextSymbol();\n    };\n    Parser.prototype.isDone = function () {\n        return this.done && this.symbol === null;\n    };\n    Parser.prototype.nextSymbol = function () {\n        var best;\n        var bestSymbol;\n        var p = this;\n        this.symbol = null;\n        this.value = null;\n        do {\n            if (this.done)\n                return false;\n            var rule = void 0;\n            best = null;\n            for (var name_1 in this.rules) {\n                rule = this.rules[name_1];\n                var match = rule.exec(p.text);\n                if (match) {\n                    if (best === null || match[0].length > best[0].length) {\n                        best = match;\n                        bestSymbol = name_1;\n                    }\n                }\n            }\n            if (best != null) {\n                this.text = this.text.substr(best[0].length);\n                if (this.text === '')\n                    this.done = true;\n            }\n            if (best == null) {\n                this.done = true;\n                this.symbol = null;\n                this.value = null;\n                return;\n            }\n            // @ts-ignore\n        } while (bestSymbol === 'SKIP');\n        // @ts-ignore\n        this.symbol = bestSymbol;\n        this.value = best;\n        return true;\n    };\n    Parser.prototype.accept = function (name) {\n        if (this.symbol === name) {\n            if (this.value) {\n                var v = this.value;\n                this.nextSymbol();\n                return v;\n            }\n            this.nextSymbol();\n            return true;\n        }\n        return false;\n    };\n    Parser.prototype.acceptNumber = function () {\n        return this.accept('number');\n    };\n    Parser.prototype.expect = function (name) {\n        if (this.accept(name))\n            return true;\n        throw new Error('expected ' + name + ' but found ' + this.symbol);\n    };\n    return Parser;\n}());\nexport default function parseText(text, language) {\n    if (language === void 0) { language = ENGLISH; }\n    var options = {};\n    var ttr = new Parser(language.tokens);\n    if (!ttr.start(text))\n        return null;\n    S();\n    return options;\n    function S() {\n        // every [n]\n        ttr.expect('every');\n        var n = ttr.acceptNumber();\n        if (n)\n            options.interval = parseInt(n[0], 10);\n        if (ttr.isDone())\n            throw new Error('Unexpected end');\n        switch (ttr.symbol) {\n            case 'day(s)':\n                options.freq = RRule.DAILY;\n                if (ttr.nextSymbol()) {\n                    AT();\n                    F();\n                }\n                break;\n            // FIXME Note: every 2 weekdays != every two weeks on weekdays.\n            // DAILY on weekdays is not a valid rule\n            case 'weekday(s)':\n                options.freq = RRule.WEEKLY;\n                options.byweekday = [\n                    RRule.MO,\n                    RRule.TU,\n                    RRule.WE,\n                    RRule.TH,\n                    RRule.FR\n                ];\n                ttr.nextSymbol();\n                F();\n                break;\n            case 'week(s)':\n                options.freq = RRule.WEEKLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'hour(s)':\n                options.freq = RRule.HOURLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'minute(s)':\n                options.freq = RRule.MINUTELY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'month(s)':\n                options.freq = RRule.MONTHLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'year(s)':\n                options.freq = RRule.YEARLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'monday':\n            case 'tuesday':\n            case 'wednesday':\n            case 'thursday':\n            case 'friday':\n            case 'saturday':\n            case 'sunday':\n                options.freq = RRule.WEEKLY;\n                var key = ttr.symbol.substr(0, 2).toUpperCase();\n                options.byweekday = [RRule[key]];\n                if (!ttr.nextSymbol())\n                    return;\n                // TODO check for duplicates\n                while (ttr.accept('comma')) {\n                    if (ttr.isDone())\n                        throw new Error('Unexpected end');\n                    var wkd = decodeWKD();\n                    if (!wkd) {\n                        throw new Error('Unexpected symbol ' + ttr.symbol + ', expected weekday');\n                    }\n                    // @ts-ignore\n                    options.byweekday.push(RRule[wkd]);\n                    ttr.nextSymbol();\n                }\n                MDAYs();\n                F();\n                break;\n            case 'january':\n            case 'february':\n            case 'march':\n            case 'april':\n            case 'may':\n            case 'june':\n            case 'july':\n            case 'august':\n            case 'september':\n            case 'october':\n            case 'november':\n            case 'december':\n                options.freq = RRule.YEARLY;\n                options.bymonth = [decodeM()];\n                if (!ttr.nextSymbol())\n                    return;\n                // TODO check for duplicates\n                while (ttr.accept('comma')) {\n                    if (ttr.isDone())\n                        throw new Error('Unexpected end');\n                    var m = decodeM();\n                    if (!m) {\n                        throw new Error('Unexpected symbol ' + ttr.symbol + ', expected month');\n                    }\n                    options.bymonth.push(m);\n                    ttr.nextSymbol();\n                }\n                ON();\n                F();\n                break;\n            default:\n                throw new Error('Unknown symbol');\n        }\n    }\n    function ON() {\n        var on = ttr.accept('on');\n        var the = ttr.accept('the');\n        if (!(on || the))\n            return;\n        do {\n            var nth = decodeNTH();\n            var wkd = decodeWKD();\n            var m = decodeM();\n            // nth <weekday> | <weekday>\n            if (nth) {\n                // ttr.nextSymbol()\n                if (wkd) {\n                    ttr.nextSymbol();\n                    if (!options.byweekday)\n                        options.byweekday = [];\n                    // @ts-ignore\n                    options.byweekday.push(RRule[wkd].nth(nth));\n                }\n                else {\n                    if (!options.bymonthday)\n                        options.bymonthday = [];\n                    // @ts-ignore\n                    options.bymonthday.push(nth);\n                    ttr.accept('day(s)');\n                }\n                // <weekday>\n            }\n            else if (wkd) {\n                ttr.nextSymbol();\n                if (!options.byweekday)\n                    options.byweekday = [];\n                // @ts-ignore\n                options.byweekday.push(RRule[wkd]);\n            }\n            else if (ttr.symbol === 'weekday(s)') {\n                ttr.nextSymbol();\n                if (!options.byweekday) {\n                    options.byweekday = [\n                        RRule.MO,\n                        RRule.TU,\n                        RRule.WE,\n                        RRule.TH,\n                        RRule.FR\n                    ];\n                }\n            }\n            else if (ttr.symbol === 'week(s)') {\n                ttr.nextSymbol();\n                var n = ttr.acceptNumber();\n                if (!n) {\n                    throw new Error('Unexpected symbol ' + ttr.symbol + ', expected week number');\n                }\n                options.byweekno = [parseInt(n[0], 10)];\n                while (ttr.accept('comma')) {\n                    n = ttr.acceptNumber();\n                    if (!n) {\n                        throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n                    }\n                    options.byweekno.push(parseInt(n[0], 10));\n                }\n            }\n            else if (m) {\n                ttr.nextSymbol();\n                if (!options.bymonth)\n                    options.bymonth = [];\n                // @ts-ignore\n                options.bymonth.push(m);\n            }\n            else {\n                return;\n            }\n        } while (ttr.accept('comma') || ttr.accept('the') || ttr.accept('on'));\n    }\n    function AT() {\n        var at = ttr.accept('at');\n        if (!at)\n            return;\n        do {\n            var n = ttr.acceptNumber();\n            if (!n) {\n                throw new Error('Unexpected symbol ' + ttr.symbol + ', expected hour');\n            }\n            options.byhour = [parseInt(n[0], 10)];\n            while (ttr.accept('comma')) {\n                n = ttr.acceptNumber();\n                if (!n) {\n                    throw new Error('Unexpected symbol ' + ttr.symbol + '; expected hour');\n                }\n                options.byhour.push(parseInt(n[0], 10));\n            }\n        } while (ttr.accept('comma') || ttr.accept('at'));\n    }\n    function decodeM() {\n        switch (ttr.symbol) {\n            case 'january':\n                return 1;\n            case 'february':\n                return 2;\n            case 'march':\n                return 3;\n            case 'april':\n                return 4;\n            case 'may':\n                return 5;\n            case 'june':\n                return 6;\n            case 'july':\n                return 7;\n            case 'august':\n                return 8;\n            case 'september':\n                return 9;\n            case 'october':\n                return 10;\n            case 'november':\n                return 11;\n            case 'december':\n                return 12;\n            default:\n                return false;\n        }\n    }\n    function decodeWKD() {\n        switch (ttr.symbol) {\n            case 'monday':\n            case 'tuesday':\n            case 'wednesday':\n            case 'thursday':\n            case 'friday':\n            case 'saturday':\n            case 'sunday':\n                return ttr.symbol.substr(0, 2).toUpperCase();\n            default:\n                return false;\n        }\n    }\n    function decodeNTH() {\n        switch (ttr.symbol) {\n            case 'last':\n                ttr.nextSymbol();\n                return -1;\n            case 'first':\n                ttr.nextSymbol();\n                return 1;\n            case 'second':\n                ttr.nextSymbol();\n                return ttr.accept('last') ? -2 : 2;\n            case 'third':\n                ttr.nextSymbol();\n                return ttr.accept('last') ? -3 : 3;\n            case 'nth':\n                var v = parseInt(ttr.value[1], 10);\n                if (v < -366 || v > 366)\n                    throw new Error('Nth out of range: ' + v);\n                ttr.nextSymbol();\n                return ttr.accept('last') ? -v : v;\n            default:\n                return false;\n        }\n    }\n    function MDAYs() {\n        ttr.accept('on');\n        ttr.accept('the');\n        var nth = decodeNTH();\n        if (!nth)\n            return;\n        options.bymonthday = [nth];\n        ttr.nextSymbol();\n        while (ttr.accept('comma')) {\n            nth = decodeNTH();\n            if (!nth) {\n                throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n            }\n            options.bymonthday.push(nth);\n            ttr.nextSymbol();\n        }\n    }\n    function F() {\n        if (ttr.symbol === 'until') {\n            var date = Date.parse(ttr.text);\n            if (!date)\n                throw new Error('Cannot parse until date:' + ttr.text);\n            options.until = new Date(date);\n        }\n        else if (ttr.accept('for')) {\n            options.count = parseInt(ttr.value[0], 10);\n            ttr.expect('number');\n            // ttr.expect('times')\n        }\n    }\n}\n//# sourceMappingURL=parsetext.js.map"]},"metadata":{},"sourceType":"module"}