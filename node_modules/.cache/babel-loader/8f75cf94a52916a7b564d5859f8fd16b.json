{"ast":null,"code":"import { __extends } from \"tslib\";\nimport RRule from './rrule';\nimport dateutil from './dateutil';\nimport { includes } from './helpers';\nimport { iterSet } from './iterset';\nimport { rrulestr } from './rrulestr';\nimport { optionsToString } from './optionstostring';\n\nfunction createGetterSetter(fieldName) {\n  var _this = this;\n\n  return function (field) {\n    if (field !== undefined) {\n      _this[\"_\" + fieldName] = field;\n    }\n\n    if (_this[\"_\" + fieldName] !== undefined) {\n      return _this[\"_\" + fieldName];\n    }\n\n    for (var i = 0; i < _this._rrule.length; i++) {\n      var field_1 = _this._rrule[i].origOptions[fieldName];\n\n      if (field_1) {\n        return field_1;\n      }\n    }\n  };\n}\n\nvar RRuleSet =\n/** @class */\nfunction (_super) {\n  __extends(RRuleSet, _super);\n  /**\n   *\n   * @param {Boolean?} noCache\n   *  The same stratagy as RRule on cache, default to false\n   * @constructor\n   */\n\n\n  function RRuleSet(noCache) {\n    if (noCache === void 0) {\n      noCache = false;\n    }\n\n    var _this = _super.call(this, {}, noCache) || this;\n\n    _this.dtstart = createGetterSetter.apply(_this, ['dtstart']);\n    _this.tzid = createGetterSetter.apply(_this, ['tzid']);\n    _this._rrule = [];\n    _this._rdate = [];\n    _this._exrule = [];\n    _this._exdate = [];\n    return _this;\n  }\n\n  RRuleSet.prototype._iter = function (iterResult) {\n    return iterSet(iterResult, this._rrule, this._exrule, this._rdate, this._exdate, this.tzid());\n  };\n  /**\n   * Adds an RRule to the set\n   *\n   * @param {RRule}\n   */\n\n\n  RRuleSet.prototype.rrule = function (rrule) {\n    _addRule(rrule, this._rrule);\n  };\n  /**\n   * Adds an EXRULE to the set\n   *\n   * @param {RRule}\n   */\n\n\n  RRuleSet.prototype.exrule = function (rrule) {\n    _addRule(rrule, this._exrule);\n  };\n  /**\n   * Adds an RDate to the set\n   *\n   * @param {Date}\n   */\n\n\n  RRuleSet.prototype.rdate = function (date) {\n    _addDate(date, this._rdate);\n  };\n  /**\n   * Adds an EXDATE to the set\n   *\n   * @param {Date}\n   */\n\n\n  RRuleSet.prototype.exdate = function (date) {\n    _addDate(date, this._exdate);\n  };\n  /**\n   * Get list of included rrules in this recurrence set.\n   *\n   * @return List of rrules\n   */\n\n\n  RRuleSet.prototype.rrules = function () {\n    return this._rrule.map(function (e) {\n      return rrulestr(e.toString());\n    });\n  };\n  /**\n   * Get list of excluded rrules in this recurrence set.\n   *\n   * @return List of exrules\n   */\n\n\n  RRuleSet.prototype.exrules = function () {\n    return this._exrule.map(function (e) {\n      return rrulestr(e.toString());\n    });\n  };\n  /**\n   * Get list of included datetimes in this recurrence set.\n   *\n   * @return List of rdates\n   */\n\n\n  RRuleSet.prototype.rdates = function () {\n    return this._rdate.map(function (e) {\n      return new Date(e.getTime());\n    });\n  };\n  /**\n   * Get list of included datetimes in this recurrence set.\n   *\n   * @return List of exdates\n   */\n\n\n  RRuleSet.prototype.exdates = function () {\n    return this._exdate.map(function (e) {\n      return new Date(e.getTime());\n    });\n  };\n\n  RRuleSet.prototype.valueOf = function () {\n    var result = [];\n\n    if (!this._rrule.length && this._dtstart) {\n      result = result.concat(optionsToString({\n        dtstart: this._dtstart\n      }));\n    }\n\n    this._rrule.forEach(function (rrule) {\n      result = result.concat(rrule.toString().split('\\n'));\n    });\n\n    this._exrule.forEach(function (exrule) {\n      result = result.concat(exrule.toString().split('\\n').map(function (line) {\n        return line.replace(/^RRULE:/, 'EXRULE:');\n      }).filter(function (line) {\n        return !/^DTSTART/.test(line);\n      }));\n    });\n\n    if (this._rdate.length) {\n      result.push(rdatesToString('RDATE', this._rdate, this.tzid()));\n    }\n\n    if (this._exdate.length) {\n      result.push(rdatesToString('EXDATE', this._exdate, this.tzid()));\n    }\n\n    return result;\n  };\n  /**\n   * to generate recurrence field such as:\n   *   DTSTART:19970902T010000Z\n   *   RRULE:FREQ=YEARLY;COUNT=2;BYDAY=TU\n   *   RRULE:FREQ=YEARLY;COUNT=1;BYDAY=TH\n   */\n\n\n  RRuleSet.prototype.toString = function () {\n    return this.valueOf().join('\\n');\n  };\n  /**\n   * Create a new RRuleSet Object completely base on current instance\n   */\n\n\n  RRuleSet.prototype.clone = function () {\n    var rrs = new RRuleSet(!!this._cache);\n\n    this._rrule.forEach(function (rule) {\n      return rrs.rrule(rule.clone());\n    });\n\n    this._exrule.forEach(function (rule) {\n      return rrs.exrule(rule.clone());\n    });\n\n    this._rdate.forEach(function (date) {\n      return rrs.rdate(new Date(date.getTime()));\n    });\n\n    this._exdate.forEach(function (date) {\n      return rrs.exdate(new Date(date.getTime()));\n    });\n\n    return rrs;\n  };\n\n  return RRuleSet;\n}(RRule);\n\nexport default RRuleSet;\n\nfunction _addRule(rrule, collection) {\n  if (!(rrule instanceof RRule)) {\n    throw new TypeError(String(rrule) + ' is not RRule instance');\n  }\n\n  if (!includes(collection.map(String), String(rrule))) {\n    collection.push(rrule);\n  }\n}\n\nfunction _addDate(date, collection) {\n  if (!(date instanceof Date)) {\n    throw new TypeError(String(date) + ' is not Date instance');\n  }\n\n  if (!includes(collection.map(Number), Number(date))) {\n    collection.push(date);\n    dateutil.sort(collection);\n  }\n}\n\nfunction rdatesToString(param, rdates, tzid) {\n  var isUTC = !tzid || tzid.toUpperCase() === 'UTC';\n  var header = isUTC ? param + \":\" : param + \";TZID=\" + tzid + \":\";\n  var dateString = rdates.map(function (rdate) {\n    return dateutil.timeToUntilString(rdate.valueOf(), isUTC);\n  }).join(',');\n  return \"\" + header + dateString;\n}","map":{"version":3,"sources":["../../../src/rruleset.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport RRule from './rrule';\nimport dateutil from './dateutil';\nimport { includes } from './helpers';\nimport { iterSet } from './iterset';\nimport { rrulestr } from './rrulestr';\nimport { optionsToString } from './optionstostring';\nfunction createGetterSetter(fieldName) {\n    var _this = this;\n    return function (field) {\n        if (field !== undefined) {\n            _this[\"_\" + fieldName] = field;\n        }\n        if (_this[\"_\" + fieldName] !== undefined) {\n            return _this[\"_\" + fieldName];\n        }\n        for (var i = 0; i < _this._rrule.length; i++) {\n            var field_1 = _this._rrule[i].origOptions[fieldName];\n            if (field_1) {\n                return field_1;\n            }\n        }\n    };\n}\nvar RRuleSet = /** @class */ (function (_super) {\n    __extends(RRuleSet, _super);\n    /**\n     *\n     * @param {Boolean?} noCache\n     *  The same stratagy as RRule on cache, default to false\n     * @constructor\n     */\n    function RRuleSet(noCache) {\n        if (noCache === void 0) { noCache = false; }\n        var _this = _super.call(this, {}, noCache) || this;\n        _this.dtstart = createGetterSetter.apply(_this, ['dtstart']);\n        _this.tzid = createGetterSetter.apply(_this, ['tzid']);\n        _this._rrule = [];\n        _this._rdate = [];\n        _this._exrule = [];\n        _this._exdate = [];\n        return _this;\n    }\n    RRuleSet.prototype._iter = function (iterResult) {\n        return iterSet(iterResult, this._rrule, this._exrule, this._rdate, this._exdate, this.tzid());\n    };\n    /**\n     * Adds an RRule to the set\n     *\n     * @param {RRule}\n     */\n    RRuleSet.prototype.rrule = function (rrule) {\n        _addRule(rrule, this._rrule);\n    };\n    /**\n     * Adds an EXRULE to the set\n     *\n     * @param {RRule}\n     */\n    RRuleSet.prototype.exrule = function (rrule) {\n        _addRule(rrule, this._exrule);\n    };\n    /**\n     * Adds an RDate to the set\n     *\n     * @param {Date}\n     */\n    RRuleSet.prototype.rdate = function (date) {\n        _addDate(date, this._rdate);\n    };\n    /**\n     * Adds an EXDATE to the set\n     *\n     * @param {Date}\n     */\n    RRuleSet.prototype.exdate = function (date) {\n        _addDate(date, this._exdate);\n    };\n    /**\n     * Get list of included rrules in this recurrence set.\n     *\n     * @return List of rrules\n     */\n    RRuleSet.prototype.rrules = function () {\n        return this._rrule.map(function (e) { return rrulestr(e.toString()); });\n    };\n    /**\n     * Get list of excluded rrules in this recurrence set.\n     *\n     * @return List of exrules\n     */\n    RRuleSet.prototype.exrules = function () {\n        return this._exrule.map(function (e) { return rrulestr(e.toString()); });\n    };\n    /**\n     * Get list of included datetimes in this recurrence set.\n     *\n     * @return List of rdates\n     */\n    RRuleSet.prototype.rdates = function () {\n        return this._rdate.map(function (e) { return new Date(e.getTime()); });\n    };\n    /**\n     * Get list of included datetimes in this recurrence set.\n     *\n     * @return List of exdates\n     */\n    RRuleSet.prototype.exdates = function () {\n        return this._exdate.map(function (e) { return new Date(e.getTime()); });\n    };\n    RRuleSet.prototype.valueOf = function () {\n        var result = [];\n        if (!this._rrule.length && this._dtstart) {\n            result = result.concat(optionsToString({ dtstart: this._dtstart }));\n        }\n        this._rrule.forEach(function (rrule) {\n            result = result.concat(rrule.toString().split('\\n'));\n        });\n        this._exrule.forEach(function (exrule) {\n            result = result.concat(exrule.toString().split('\\n')\n                .map(function (line) { return line.replace(/^RRULE:/, 'EXRULE:'); })\n                .filter(function (line) { return !/^DTSTART/.test(line); }));\n        });\n        if (this._rdate.length) {\n            result.push(rdatesToString('RDATE', this._rdate, this.tzid()));\n        }\n        if (this._exdate.length) {\n            result.push(rdatesToString('EXDATE', this._exdate, this.tzid()));\n        }\n        return result;\n    };\n    /**\n     * to generate recurrence field such as:\n     *   DTSTART:19970902T010000Z\n     *   RRULE:FREQ=YEARLY;COUNT=2;BYDAY=TU\n     *   RRULE:FREQ=YEARLY;COUNT=1;BYDAY=TH\n     */\n    RRuleSet.prototype.toString = function () {\n        return this.valueOf().join('\\n');\n    };\n    /**\n     * Create a new RRuleSet Object completely base on current instance\n     */\n    RRuleSet.prototype.clone = function () {\n        var rrs = new RRuleSet(!!this._cache);\n        this._rrule.forEach(function (rule) { return rrs.rrule(rule.clone()); });\n        this._exrule.forEach(function (rule) { return rrs.exrule(rule.clone()); });\n        this._rdate.forEach(function (date) { return rrs.rdate(new Date(date.getTime())); });\n        this._exdate.forEach(function (date) { return rrs.exdate(new Date(date.getTime())); });\n        return rrs;\n    };\n    return RRuleSet;\n}(RRule));\nexport default RRuleSet;\nfunction _addRule(rrule, collection) {\n    if (!(rrule instanceof RRule)) {\n        throw new TypeError(String(rrule) + ' is not RRule instance');\n    }\n    if (!includes(collection.map(String), String(rrule))) {\n        collection.push(rrule);\n    }\n}\nfunction _addDate(date, collection) {\n    if (!(date instanceof Date)) {\n        throw new TypeError(String(date) + ' is not Date instance');\n    }\n    if (!includes(collection.map(Number), Number(date))) {\n        collection.push(date);\n        dateutil.sort(collection);\n    }\n}\nfunction rdatesToString(param, rdates, tzid) {\n    var isUTC = !tzid || tzid.toUpperCase() === 'UTC';\n    var header = isUTC ? param + \":\" : param + \";TZID=\" + tzid + \":\";\n    var dateString = rdates\n        .map(function (rdate) { return dateutil.timeToUntilString(rdate.valueOf(), isUTC); })\n        .join(',');\n    return \"\" + header + dateString;\n}\n//# sourceMappingURL=rruleset.js.map"]},"metadata":{},"sourceType":"module"}