{"ast":null,"code":"import IterResult from './iterresult';\nimport dateutil from './dateutil';\nimport { isArray } from './helpers';\n\nvar Cache =\n/** @class */\nfunction () {\n  function Cache() {\n    this.all = false;\n    this.before = [];\n    this.after = [];\n    this.between = [];\n  }\n  /**\n   * @param {String} what - all/before/after/between\n   * @param {Array,Date} value - an array of dates, one date, or null\n   * @param {Object?} args - _iter arguments\n   */\n\n\n  Cache.prototype._cacheAdd = function (what, value, args) {\n    if (value) {\n      value = value instanceof Date ? dateutil.clone(value) : dateutil.cloneDates(value);\n    }\n\n    if (what === 'all') {\n      this.all = value;\n    } else {\n      args._value = value;\n      this[what].push(args);\n    }\n  };\n  /**\n   * @return false - not in the cache\n   *         null  - cached, but zero occurrences (before/after)\n   *         Date  - cached (before/after)\n   *         []    - cached, but zero occurrences (all/between)\n   *         [Date1, DateN] - cached (all/between)\n   */\n\n\n  Cache.prototype._cacheGet = function (what, args) {\n    var cached = false;\n    var argsKeys = args ? Object.keys(args) : [];\n\n    var findCacheDiff = function (item) {\n      for (var i = 0; i < argsKeys.length; i++) {\n        var key = argsKeys[i];\n\n        if (String(args[key]) !== String(item[key])) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var cachedObject = this[what];\n\n    if (what === 'all') {\n      cached = this.all;\n    } else if (isArray(cachedObject)) {\n      // Let's see whether we've already called the\n      // 'what' method with the same 'args'\n      for (var i = 0; i < cachedObject.length; i++) {\n        var item = cachedObject[i];\n        if (argsKeys.length && findCacheDiff(item)) continue;\n        cached = item._value;\n        break;\n      }\n    }\n\n    if (!cached && this.all) {\n      // Not in the cache, but we already know all the occurrences,\n      // so we can find the correct dates from the cached ones.\n      var iterResult = new IterResult(what, args);\n\n      for (var i = 0; i < this.all.length; i++) {\n        if (!iterResult.accept(this.all[i])) break;\n      }\n\n      cached = iterResult.getValue();\n\n      this._cacheAdd(what, cached, args);\n    }\n\n    return isArray(cached) ? dateutil.cloneDates(cached) : cached instanceof Date ? dateutil.clone(cached) : cached;\n  };\n\n  return Cache;\n}();\n\nexport { Cache };","map":{"version":3,"sources":["../../../src/cache.ts"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAqC,cAArC;AACA,OAAO,QAAP,MAAqB,YAArB;AACA,SAAS,OAAT,QAAwB,WAAxB;;AAIA,IAAA,KAAA;AAAA;AAAA,YAAA;AAAA,WAAA,KAAA,GAAA;AACE,SAAA,GAAA,GAA0C,KAA1C;AACA,SAAA,MAAA,GAAqB,EAArB;AACA,SAAA,KAAA,GAAoB,EAApB;AACA,SAAA,OAAA,GAAsB,EAAtB;AAkFD;AAhFC;;;;AAIG;;;AACI,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UACE,IADF,EAEE,KAFF,EAGE,IAHF,EAG0B;AAExB,QAAI,KAAJ,EAAW;AACT,MAAA,KAAK,GACH,KAAK,YAAY,IAAjB,GACI,QAAQ,CAAC,KAAT,CAAe,KAAf,CADJ,GAEI,QAAQ,CAAC,UAAT,CAAoB,KAApB,CAHN;AAID;;AAED,QAAI,IAAI,KAAK,KAAb,EAAoB;AAClB,WAAK,GAAL,GAAW,KAAX;AACD,KAFD,MAEO;AACL,MAAA,IAAK,CAAC,MAAN,GAAe,KAAf;AACA,WAAK,IAAL,EAAW,IAAX,CAAgB,IAAhB;AACD;AACF,GAlBM;AAoBP;;;;;;AAMG;;;AACI,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UACE,IADF,EAEE,IAFF,EAE0B;AAExB,QAAI,MAAM,GAAiC,KAA3C;AACA,QAAM,QAAQ,GAAG,IAAI,GAAI,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAJ,GAA+C,EAApE;;AACA,QAAM,aAAa,GAAG,UAAU,IAAV,EAAwB;AAC5C,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,YAAM,GAAG,GAAG,QAAQ,CAAC,CAAD,CAApB;;AACA,YAAI,MAAM,CAAC,IAAK,CAAC,GAAD,CAAN,CAAN,KAAuB,MAAM,CAAC,IAAI,CAAC,GAAD,CAAL,CAAjC,EAA8C;AAC5C,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD,KARD;;AAUA,QAAM,YAAY,GAAG,KAAK,IAAL,CAArB;;AACA,QAAI,IAAI,KAAK,KAAb,EAAoB;AAClB,MAAA,MAAM,GAAG,KAAK,GAAd;AACD,KAFD,MAEO,IAAI,OAAO,CAAC,YAAD,CAAX,EAA2B;AAChC;AACA;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,YAAY,CAAC,MAAjC,EAAyC,CAAC,EAA1C,EAA8C;AAC5C,YAAM,IAAI,GAAG,YAAY,CAAC,CAAD,CAAzB;AACA,YAAI,QAAQ,CAAC,MAAT,IAAmB,aAAa,CAAC,IAAD,CAApC,EAA4C;AAC5C,QAAA,MAAM,GAAG,IAAI,CAAC,MAAd;AACA;AACD;AACF;;AAED,QAAI,CAAC,MAAD,IAAW,KAAK,GAApB,EAAyB;AACvB;AACA;AACA,UAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,IAAf,EAAqB,IAArB,CAAnB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAI,KAAK,GAAL,CAAoB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AACpD,YAAI,CAAC,UAAU,CAAC,MAAX,CAAmB,KAAK,GAAL,CAAoB,CAApB,CAAnB,CAAL,EAAiD;AAClD;;AACD,MAAA,MAAM,GAAG,UAAU,CAAC,QAAX,EAAT;;AACA,WAAK,SAAL,CAAe,IAAf,EAAqB,MAArB,EAA6B,IAA7B;AACD;;AAED,WAAO,OAAO,CAAC,MAAD,CAAP,GACH,QAAQ,CAAC,UAAT,CAAoB,MAApB,CADG,GAEH,MAAM,YAAY,IAAlB,GACE,QAAQ,CAAC,KAAT,CAAe,MAAf,CADF,GAEE,MAJN;AAKD,GA9CM;;AAgDT,SAAA,KAAA;AAAC,CAtFD,EAAA","sourceRoot":"","sourcesContent":["import IterResult from './iterresult';\nimport dateutil from './dateutil';\nimport { isArray } from './helpers';\nvar Cache = /** @class */ (function () {\n    function Cache() {\n        this.all = false;\n        this.before = [];\n        this.after = [];\n        this.between = [];\n    }\n    /**\n     * @param {String} what - all/before/after/between\n     * @param {Array,Date} value - an array of dates, one date, or null\n     * @param {Object?} args - _iter arguments\n     */\n    Cache.prototype._cacheAdd = function (what, value, args) {\n        if (value) {\n            value =\n                value instanceof Date\n                    ? dateutil.clone(value)\n                    : dateutil.cloneDates(value);\n        }\n        if (what === 'all') {\n            this.all = value;\n        }\n        else {\n            args._value = value;\n            this[what].push(args);\n        }\n    };\n    /**\n     * @return false - not in the cache\n     *         null  - cached, but zero occurrences (before/after)\n     *         Date  - cached (before/after)\n     *         []    - cached, but zero occurrences (all/between)\n     *         [Date1, DateN] - cached (all/between)\n     */\n    Cache.prototype._cacheGet = function (what, args) {\n        var cached = false;\n        var argsKeys = args ? Object.keys(args) : [];\n        var findCacheDiff = function (item) {\n            for (var i = 0; i < argsKeys.length; i++) {\n                var key = argsKeys[i];\n                if (String(args[key]) !== String(item[key])) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        var cachedObject = this[what];\n        if (what === 'all') {\n            cached = this.all;\n        }\n        else if (isArray(cachedObject)) {\n            // Let's see whether we've already called the\n            // 'what' method with the same 'args'\n            for (var i = 0; i < cachedObject.length; i++) {\n                var item = cachedObject[i];\n                if (argsKeys.length && findCacheDiff(item))\n                    continue;\n                cached = item._value;\n                break;\n            }\n        }\n        if (!cached && this.all) {\n            // Not in the cache, but we already know all the occurrences,\n            // so we can find the correct dates from the cached ones.\n            var iterResult = new IterResult(what, args);\n            for (var i = 0; i < this.all.length; i++) {\n                if (!iterResult.accept(this.all[i]))\n                    break;\n            }\n            cached = iterResult.getValue();\n            this._cacheAdd(what, cached, args);\n        }\n        return isArray(cached)\n            ? dateutil.cloneDates(cached)\n            : cached instanceof Date\n                ? dateutil.clone(cached)\n                : cached;\n    };\n    return Cache;\n}());\nexport { Cache };\n//# sourceMappingURL=cache.js.map"]},"metadata":{},"sourceType":"module"}