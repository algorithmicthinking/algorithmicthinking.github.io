{"ast":null,"code":"/**\n * This class helps us to emulate python's generators, sorta.\n */\nvar IterResult =\n/** @class */\nfunction () {\n  function IterResult(method, args) {\n    this.minDate = null;\n    this.maxDate = null;\n    this._result = [];\n    this.total = 0;\n    this.method = method;\n    this.args = args;\n\n    if (method === 'between') {\n      this.maxDate = args.inc ? args.before : new Date(args.before.getTime() - 1);\n      this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);\n    } else if (method === 'before') {\n      this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);\n    } else if (method === 'after') {\n      this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);\n    }\n  }\n  /**\n   * Possibly adds a date into the result.\n   *\n   * @param {Date} date - the date isn't necessarly added to the result\n   *                      list (if it is too late/too early)\n   * @return {Boolean} true if it makes sense to continue the iteration\n   *                   false if we're done.\n   */\n\n\n  IterResult.prototype.accept = function (date) {\n    ++this.total;\n    var tooEarly = this.minDate && date < this.minDate;\n    var tooLate = this.maxDate && date > this.maxDate;\n\n    if (this.method === 'between') {\n      if (tooEarly) return true;\n      if (tooLate) return false;\n    } else if (this.method === 'before') {\n      if (tooLate) return false;\n    } else if (this.method === 'after') {\n      if (tooEarly) return true;\n      this.add(date);\n      return false;\n    }\n\n    return this.add(date);\n  };\n  /**\n   *\n   * @param {Date} date that is part of the result.\n   * @return {Boolean} whether we are interested in more values.\n   */\n\n\n  IterResult.prototype.add = function (date) {\n    this._result.push(date);\n\n    return true;\n  };\n  /**\n   * 'before' and 'after' return only one date, whereas 'all'\n   * and 'between' an array.\n   * @return {Date,Array?}\n   */\n\n\n  IterResult.prototype.getValue = function () {\n    var res = this._result;\n\n    switch (this.method) {\n      case 'all':\n      case 'between':\n        return res;\n\n      case 'before':\n      case 'after':\n      default:\n        return res.length ? res[res.length - 1] : null;\n    }\n  };\n\n  IterResult.prototype.clone = function () {\n    return new IterResult(this.method, this.args);\n  };\n\n  return IterResult;\n}();\n\nexport default IterResult;","map":{"version":3,"sources":["../../../src/iterresult.ts"],"names":[],"mappings":"AAcA;;AAEG;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;AAQE,WAAA,UAAA,CAAa,MAAb,EAAwB,IAAxB,EAA+C;AAL/B,SAAA,OAAA,GAAuB,IAAvB;AACA,SAAA,OAAA,GAAuB,IAAvB;AACT,SAAA,OAAA,GAAkB,EAAlB;AACA,SAAA,KAAA,GAAQ,CAAR;AAGL,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAY,IAAZ;;AAEA,QAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAK,OAAL,GAAe,IAAI,CAAC,GAAL,GACX,IAAI,CAAC,MADM,GAEX,IAAI,IAAJ,CAAS,IAAI,CAAC,MAAL,CAAa,OAAb,KAAyB,CAAlC,CAFJ;AAGA,WAAK,OAAL,GAAe,IAAI,CAAC,GAAL,GAAW,IAAI,CAAC,KAAhB,GAAyB,IAAI,IAAJ,CAAS,IAAI,CAAC,KAAL,CAAY,OAAZ,KAAwB,CAAjC,CAAxC;AACD,KALD,MAKO,IAAI,MAAM,KAAK,QAAf,EAAyB;AAC9B,WAAK,OAAL,GAAe,IAAI,CAAC,GAAL,GAAW,IAAI,CAAC,EAAhB,GAAsB,IAAI,IAAJ,CAAS,IAAI,CAAC,EAAL,CAAS,OAAT,KAAqB,CAA9B,CAArC;AACD,KAFM,MAEA,IAAI,MAAM,KAAK,OAAf,EAAwB;AAC7B,WAAK,OAAL,GAAe,IAAI,CAAC,GAAL,GAAW,IAAI,CAAC,EAAhB,GAAsB,IAAI,IAAJ,CAAS,IAAI,CAAC,EAAL,CAAS,OAAT,KAAqB,CAA9B,CAArC;AACD;AACF;AAED;;;;;;;AAOG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAQ,IAAR,EAAkB;AAChB,MAAE,KAAK,KAAP;AACA,QAAM,QAAQ,GAAG,KAAK,OAAL,IAAgB,IAAI,GAAG,KAAK,OAA7C;AACA,QAAM,OAAO,GAAG,KAAK,OAAL,IAAgB,IAAI,GAAG,KAAK,OAA5C;;AAEA,QAAI,KAAK,MAAL,KAAgB,SAApB,EAA+B;AAC7B,UAAI,QAAJ,EAAc,OAAO,IAAP;AACd,UAAI,OAAJ,EAAa,OAAO,KAAP;AACd,KAHD,MAGO,IAAI,KAAK,MAAL,KAAgB,QAApB,EAA8B;AACnC,UAAI,OAAJ,EAAa,OAAO,KAAP;AACd,KAFM,MAEA,IAAI,KAAK,MAAL,KAAgB,OAApB,EAA6B;AAClC,UAAI,QAAJ,EAAc,OAAO,IAAP;AACd,WAAK,GAAL,CAAS,IAAT;AACA,aAAO,KAAP;AACD;;AAED,WAAO,KAAK,GAAL,CAAS,IAAT,CAAP;AACD,GAjBD;AAmBA;;;;AAIG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAK,IAAL,EAAe;AACb,SAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB;;AACA,WAAO,IAAP;AACD,GAHD;AAKA;;;;AAIG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAAG,KAAK,OAAjB;;AACA,YAAQ,KAAK,MAAb;AACE,WAAK,KAAL;AACA,WAAK,SAAL;AACE,eAAO,GAAP;;AACF,WAAK,QAAL;AACA,WAAK,OAAL;AACA;AACE,eAAQ,GAAG,CAAC,MAAJ,GAAa,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAAhB,GAAmC,IAA3C;AAPJ;AASD,GAXD;;AAaA,EAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,WAAO,IAAI,UAAJ,CAAe,KAAK,MAApB,EAA4B,KAAK,IAAjC,CAAP;AACD,GAFD;;AAGF,SAAA,UAAA;AAAC,CAlFD,EAAA","sourceRoot":"","sourcesContent":["/**\n * This class helps us to emulate python's generators, sorta.\n */\nvar IterResult = /** @class */ (function () {\n    function IterResult(method, args) {\n        this.minDate = null;\n        this.maxDate = null;\n        this._result = [];\n        this.total = 0;\n        this.method = method;\n        this.args = args;\n        if (method === 'between') {\n            this.maxDate = args.inc\n                ? args.before\n                : new Date(args.before.getTime() - 1);\n            this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);\n        }\n        else if (method === 'before') {\n            this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);\n        }\n        else if (method === 'after') {\n            this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);\n        }\n    }\n    /**\n     * Possibly adds a date into the result.\n     *\n     * @param {Date} date - the date isn't necessarly added to the result\n     *                      list (if it is too late/too early)\n     * @return {Boolean} true if it makes sense to continue the iteration\n     *                   false if we're done.\n     */\n    IterResult.prototype.accept = function (date) {\n        ++this.total;\n        var tooEarly = this.minDate && date < this.minDate;\n        var tooLate = this.maxDate && date > this.maxDate;\n        if (this.method === 'between') {\n            if (tooEarly)\n                return true;\n            if (tooLate)\n                return false;\n        }\n        else if (this.method === 'before') {\n            if (tooLate)\n                return false;\n        }\n        else if (this.method === 'after') {\n            if (tooEarly)\n                return true;\n            this.add(date);\n            return false;\n        }\n        return this.add(date);\n    };\n    /**\n     *\n     * @param {Date} date that is part of the result.\n     * @return {Boolean} whether we are interested in more values.\n     */\n    IterResult.prototype.add = function (date) {\n        this._result.push(date);\n        return true;\n    };\n    /**\n     * 'before' and 'after' return only one date, whereas 'all'\n     * and 'between' an array.\n     * @return {Date,Array?}\n     */\n    IterResult.prototype.getValue = function () {\n        var res = this._result;\n        switch (this.method) {\n            case 'all':\n            case 'between':\n                return res;\n            case 'before':\n            case 'after':\n            default:\n                return (res.length ? res[res.length - 1] : null);\n        }\n    };\n    IterResult.prototype.clone = function () {\n        return new IterResult(this.method, this.args);\n    };\n    return IterResult;\n}());\nexport default IterResult;\n//# sourceMappingURL=iterresult.js.map"]},"metadata":{},"sourceType":"module"}